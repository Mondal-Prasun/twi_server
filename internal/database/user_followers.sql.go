// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_followers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const followUser = `-- name: FollowUser :exec
INSERT INTO user_follows (followerId, followedId)
VALUES ($1, $2)
`

type FollowUserParams struct {
	Followerid uuid.UUID
	Followedid uuid.UUID
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.db.ExecContext(ctx, followUser, arg.Followerid, arg.Followedid)
	return err
}

const followedIds = `-- name: FollowedIds :many
SELECT followedId
FROM user_follows
WHERE followerId = $1
`

func (q *Queries) FollowedIds(ctx context.Context, followerid uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, followedIds, followerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var followedid uuid.UUID
		if err := rows.Scan(&followedid); err != nil {
			return nil, err
		}
		items = append(items, followedid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const followerCount = `-- name: FollowerCount :one
SELECT COUNT(followerId) AS followerCount
FROM user_follows
WHERE followedId = $1
`

func (q *Queries) FollowerCount(ctx context.Context, followedid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, followerCount, followedid)
	var followercount int64
	err := row.Scan(&followercount)
	return followercount, err
}

const followerIds = `-- name: FollowerIds :many
SELECT followerId
FROM user_follows
WHERE followedId = $1
`

func (q *Queries) FollowerIds(ctx context.Context, followedid uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, followerIds, followedid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var followerid uuid.UUID
		if err := rows.Scan(&followerid); err != nil {
			return nil, err
		}
		items = append(items, followerid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unFollowUser = `-- name: UnFollowUser :exec
DELETE FROM user_follows
WHERE followerId = $1 AND followedId = $2
`

type UnFollowUserParams struct {
	Followerid uuid.UUID
	Followedid uuid.UUID
}

func (q *Queries) UnFollowUser(ctx context.Context, arg UnFollowUserParams) error {
	_, err := q.db.ExecContext(ctx, unFollowUser, arg.Followerid, arg.Followedid)
	return err
}
