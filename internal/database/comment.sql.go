// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comment.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllComment = `-- name: GetAllComment :many
SELECT id, comment, postid, userid, createdat, updatedat
FROM comments
WHERE postId = $1
`

func (q *Queries) GetAllComment(ctx context.Context, postid uuid.UUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getAllComment, postid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.Postid,
			&i.Userid,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const giveComment = `-- name: GiveComment :one
INSERT INTO comments (id,comment,postId,userId,createdAt,updatedAt)
VALUES ($1, $2, $3, $4, $5, $6 )
RETURNING id, comment, postid, userid, createdat, updatedat
`

type GiveCommentParams struct {
	ID        uuid.UUID
	Comment   string
	Postid    uuid.UUID
	Userid    uuid.UUID
	Createdat time.Time
	Updatedat time.Time
}

func (q *Queries) GiveComment(ctx context.Context, arg GiveCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, giveComment,
		arg.ID,
		arg.Comment,
		arg.Postid,
		arg.Userid,
		arg.Createdat,
		arg.Updatedat,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.Postid,
		&i.Userid,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
