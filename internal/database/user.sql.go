// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,username,password,image,email,createdAt,updatedAt,accessToken)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id,accessToken
`

type CreateUserParams struct {
	ID          uuid.UUID
	Username    string
	Password    string
	Image       sql.NullString
	Email       string
	Createdat   time.Time
	Updatedat   time.Time
	Accesstoken uuid.UUID
}

type CreateUserRow struct {
	ID          uuid.UUID
	Accesstoken uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Image,
		arg.Email,
		arg.Createdat,
		arg.Updatedat,
		arg.Accesstoken,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Accesstoken)
	return i, err
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT id,username,image FROM users WHERE id = $1
`

type GetUserDetailsRow struct {
	ID       uuid.UUID
	Username string
	Image    sql.NullString
}

func (q *Queries) GetUserDetails(ctx context.Context, id uuid.UUID) (GetUserDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserDetails, id)
	var i GetUserDetailsRow
	err := row.Scan(&i.ID, &i.Username, &i.Image)
	return i, err
}

const getUserPasswordByEmail = `-- name: GetUserPasswordByEmail :one
SELECT password,id FROM users WHERE email = $1
`

type GetUserPasswordByEmailRow struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) GetUserPasswordByEmail(ctx context.Context, email string) (GetUserPasswordByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByEmail, email)
	var i GetUserPasswordByEmailRow
	err := row.Scan(&i.Password, &i.ID)
	return i, err
}

const refreshUserAccessToken = `-- name: RefreshUserAccessToken :one
UPDATE users
SET accessToken = $2
WHERE id = $1
RETURNING id,username,email,image, accessToken
`

type RefreshUserAccessTokenParams struct {
	ID          uuid.UUID
	Accesstoken uuid.UUID
}

type RefreshUserAccessTokenRow struct {
	ID          uuid.UUID
	Username    string
	Email       string
	Image       sql.NullString
	Accesstoken uuid.UUID
}

func (q *Queries) RefreshUserAccessToken(ctx context.Context, arg RefreshUserAccessTokenParams) (RefreshUserAccessTokenRow, error) {
	row := q.db.QueryRowContext(ctx, refreshUserAccessToken, arg.ID, arg.Accesstoken)
	var i RefreshUserAccessTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Image,
		&i.Accesstoken,
	)
	return i, err
}

const uploadUserImage = `-- name: UploadUserImage :one
UPDATE users
SET image = $2
WHERE id = $1
RETURNING id, username, image, accessToken
`

type UploadUserImageParams struct {
	ID    uuid.UUID
	Image sql.NullString
}

type UploadUserImageRow struct {
	ID          uuid.UUID
	Username    string
	Image       sql.NullString
	Accesstoken uuid.UUID
}

func (q *Queries) UploadUserImage(ctx context.Context, arg UploadUserImageParams) (UploadUserImageRow, error) {
	row := q.db.QueryRowContext(ctx, uploadUserImage, arg.ID, arg.Image)
	var i UploadUserImageRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Image,
		&i.Accesstoken,
	)
	return i, err
}
