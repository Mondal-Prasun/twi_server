// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,username,password,image,email,createdAt,updatedAt,accessToken)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, username, password, image, email, createdat, updatedat, accesstoken
`

type CreateUserParams struct {
	ID          uuid.UUID
	Username    string
	Password    string
	Image       sql.NullString
	Email       string
	Createdat   time.Time
	Updatedat   time.Time
	Accesstoken uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Image,
		arg.Email,
		arg.Createdat,
		arg.Updatedat,
		arg.Accesstoken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Image,
		&i.Email,
		&i.Createdat,
		&i.Updatedat,
		&i.Accesstoken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, image, email, createdat, updatedat, accesstoken FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Image,
		&i.Email,
		&i.Createdat,
		&i.Updatedat,
		&i.Accesstoken,
	)
	return i, err
}
